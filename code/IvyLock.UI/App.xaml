<Application
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:control="clr-namespace:IvyLock.View.Control"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
    xmlns:Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero" mc:Ignorable="d"
    x:Class="IvyLock.App" ShutdownMode="OnExplicitShutdown">
    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="Content/Theme.Dark.xaml" />
            </ResourceDictionary.MergedDictionaries>

            <Color x:Key="Accent">#4FB286</Color>
            <Color x:Key="SuccessAccent">#4CAF50</Color>
            <Color x:Key="WarnAccent">#DAA520</Color>
            <Color x:Key="FailAccent">#F46036</Color>
            <Color x:Key="InfoAccent">#258EA6</Color>
            <SolidColorBrush x:Key="AccentBrush" Color="{DynamicResource Accent}" />

            <!--#region Fonts & Text-->
            <FontFamily x:Key="Header">pack://application:,,,/Content/Roboto-Condensed/#Roboto Condensed</FontFamily>
            <FontFamily x:Key="Text">pack://application:,,,/Content/Roboto/#Roboto</FontFamily>
            <FontFamily x:Key="IconFont">pack://application:,,,/Content/Material-Icons/#Material Icons</FontFamily>

            <Style TargetType="{x:Type TextBlock}">
                <Setter Property="FontSize" Value="10pt" />
                <Setter Property="FontFamily" Value="{DynamicResource Text}" />
                <Setter Property="Foreground" Value="{DynamicResource Foreground}" />
            </Style>

            <Style x:Key="Subheader" TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
                <Setter Property="FontFamily" Value="{StaticResource Text}" />
                <Setter Property="FontWeight" Value="Bold" />
                <Setter Property="FontSize" Value="9pt" />
            </Style>
            <!--#endregion-->

            <!--#region Animations-->
            <ColorAnimation x:Key="SuccessAnimation"
                From="{StaticResource SuccessAccent}"
                Duration="0:0:1">
                <ColorAnimation.EasingFunction>
                    <CircleEase EasingMode="EaseOut" />
                </ColorAnimation.EasingFunction>
            </ColorAnimation>
            <ColorAnimation x:Key="WarnAnimation"
                From="{StaticResource WarnAccent}"
                Duration="0:0:1">
                <ColorAnimation.EasingFunction>
                    <CircleEase EasingMode="EaseOut" />
                </ColorAnimation.EasingFunction>
            </ColorAnimation>
            <ColorAnimation x:Key="InfoAnimation"
                From="{StaticResource InfoAccent}"
                Duration="0:0:1">
                <ColorAnimation.EasingFunction>
                    <CircleEase EasingMode="EaseOut" />
                </ColorAnimation.EasingFunction>
            </ColorAnimation>
            <ColorAnimation x:Key="FailAnimation"
                From="{StaticResource FailAccent}"
                Duration="0:0:1">
                <ColorAnimation.EasingFunction>
                    <CircleEase EasingMode="EaseOut" />
                </ColorAnimation.EasingFunction>
            </ColorAnimation>
            <ColorAnimation x:Key="AccentAnimation"
                            From="{StaticResource Accent}"
                            Duration="0:0:0.5">
                <ColorAnimation.EasingFunction>
                    <CubicEase />
                </ColorAnimation.EasingFunction>
            </ColorAnimation>
            <!--#endregion-->

            <!--#region Control Templates-->
            <ControlTemplate x:Key="ComboBoxItemControlTemplate" TargetType="{x:Type ComboBoxItem}">
                <control:RippleEffectDecorator x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True"
                                               HighlightBackground="{DynamicResource BackgroundQuarter}" Cursor="Hand">
                    <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                </control:RippleEffectDecorator>
                <ControlTemplate.Triggers>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="TextElement.Foreground" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                    </Trigger>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Background" TargetName="Bd" Value="{DynamicResource BackgroundQuarter}" />
                    </Trigger>
                    <Trigger Property="IsKeyboardFocused" Value="True">
                        <Setter Property="Background" TargetName="Bd" Value="{DynamicResource BackgroundQuarter}" />
                    </Trigger>
                    <Trigger Property="IsSelected" Value="True">
                        <Setter Property="Background" TargetName="Bd" Value="{DynamicResource BackgroundQuarter}" />
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
            <ControlTemplate x:Key="RippleEffectDecoratorTemplate" TargetType="{x:Type ContentControl}">
                <Grid x:Name="PART_grid"
                              Background="{TemplateBinding Background}"
                              DataContext="{TemplateBinding DataContext}">

                    <Grid.Resources>
                        <Storyboard x:Key="PART_animation">
                            <DoubleAnimation Storyboard.TargetName="PART_ellipse" Storyboard.TargetProperty="RadiusX"
                                                     From="0" Duration="0:0:0.25" />
                            <DoubleAnimation Storyboard.TargetName="PART_shape" Storyboard.TargetProperty="Opacity"
                                                     BeginTime="0:0:0.25" Duration="0:0:0.25" From="1" To="0" />
                            <DoubleAnimation Storyboard.TargetName="PART_ellipse" Storyboard.TargetProperty="RadiusX"
                                                     To="0" BeginTime="0:0:0.5" Duration="0:0:0" />
                            <DoubleAnimation Storyboard.TargetName="PART_shape" Storyboard.TargetProperty="Opacity"
                                                     BeginTime="0:0:0.5" Duration="0:0:0" To="1" />
                        </Storyboard>
                    </Grid.Resources>

                    <Canvas ClipToBounds="True"
                                    Width="{TemplateBinding ActualWidth}"
                                    Height="{TemplateBinding ActualHeight}">
                        <Path x:Name="PART_shape" Canvas.Top="0" Canvas.Left="0"
                                                    Fill="{Binding HighlightBackground, RelativeSource={RelativeSource TemplatedParent}}">
                            <Path.Data>
                                <EllipseGeometry x:Name="PART_ellipse"
                                                         RadiusX="0"
                                                         RadiusY="{Binding RadiusX, ElementName=PART_ellipse}"
                                                         Center="0,0" />
                            </Path.Data>
                        </Path>
                    </Canvas>

                    <ContentPresenter x:Name="PART_contentpresenter" />
                </Grid>
            </ControlTemplate>
            <ControlTemplate x:Key="PasswordBoxTemplate" TargetType="{x:Type PasswordBox}">
                <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}"
                        SnapsToDevicePixels="True" MaxWidth="{TemplateBinding MaxWidth}" MaxHeight="{TemplateBinding MaxHeight}">
                    <Grid>
                        <TextBlock x:Name="watermark" Opacity="0.5" Visibility="Collapsed"
                               Text="{TemplateBinding control:Helper.Placeholder}"
                               HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                               VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                               Padding="{TemplateBinding Padding}" />
                        <ScrollViewer x:Name="PART_ContentHost" Focusable="False"
                                      HorizontalScrollBarVisibility="Hidden"
                                      VerticalScrollBarVisibility="Hidden"
                                      Padding="{TemplateBinding Padding}" />
                    </Grid>
                </Border>
                <ControlTemplate.Triggers>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Opacity" TargetName="border" Value="0.56" />
                    </Trigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsKeyboardFocused" Value="True" />
                            <Condition Property="control:PasswordHelper.EncryptedPassword" Value="{x:Null}" />
                        </MultiTrigger.Conditions>
                        <Setter Property="Opacity" TargetName="watermark" Value="0.25" />
                    </MultiTrigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsKeyboardFocused" Value="False" />
                            <Condition Property="control:PasswordHelper.EncryptedPassword" Value="{x:Null}" />
                        </MultiTrigger.Conditions>
                        <Setter Property="Visibility" TargetName="watermark" Value="Visible" />
                    </MultiTrigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
            <ControlTemplate x:Key="CheckBoxTemplate" TargetType="{x:Type CheckBox}">
                <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <Border x:Name="checkBoxBorder" BorderBrush="{DynamicResource ForegroundTertiary}" BorderThickness="{TemplateBinding BorderThickness}"
                        Background="{x:Null}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="1"
                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}" CornerRadius="2">
                        <Grid x:Name="markGrid">
                            <TextBlock x:Name="optionMark" Text="&#xE5CA;" FontSize="18"
                              Foreground="{DynamicResource Foreground}" Margin="-1,-5,-5,-1" Opacity="0" FontFamily="{StaticResource IconFont}" />
                            <Rectangle x:Name="indeterminateMark" Fill="{DynamicResource ForegroundSecondary}" Margin="2" Opacity="0" />
                        </Grid>
                    </Border>
                    <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}"
                                Grid.Column="1" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}"
                                RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                </Grid>
                <ControlTemplate.Triggers>
                    <Trigger Property="HasContent" Value="True">
                        <Setter Property="FocusVisualStyle">
                            <Setter.Value>
                                <Style>
                                    <Setter Property="Control.Template">
                                        <Setter.Value>
                                            <ControlTemplate>
                                                <Rectangle Margin="14,0,0,0" SnapsToDevicePixels="True" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2" />
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </Setter.Value>
                        </Setter>
                        <Setter Property="Padding" Value="4,-1,0,0" />
                    </Trigger>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{DynamicResource Foreground}" />
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{DynamicResource Control}" />
                        <Setter Property="Foreground" TargetName="optionMark" Value="{DynamicResource Control}" />
                        <Setter Property="Fill" TargetName="indeterminateMark" Value="{DynamicResource Control}" />
                    </Trigger>
                    <Trigger Property="IsPressed" Value="True">
                        <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{DynamicResource Foreground}" />
                        <Setter Property="Foreground" TargetName="optionMark" Value="{DynamicResource ForegroundSecondary}" />
                        <Setter Property="Fill" TargetName="indeterminateMark" Value="{DynamicResource ForegroundSecondary}" />
                    </Trigger>
                    <Trigger Property="IsChecked" Value="True">
                        <Setter Property="Opacity" TargetName="optionMark" Value="1" />
                        <Setter Property="Opacity" TargetName="indeterminateMark" Value="0" />
                    </Trigger>
                    <Trigger Property="IsChecked" Value="{x:Null}">
                        <Setter Property="Opacity" TargetName="optionMark" Value="0" />
                        <Setter Property="Opacity" TargetName="indeterminateMark" Value="1" />
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
            <ControlTemplate x:Key="WindowTemplate" TargetType="{x:Type Window}">
                <Grid>
                    <Border Background="{DynamicResource BackgroundDark}" Grid.RowSpan="2" Margin="5">
                        <Border.Effect>
                            <DropShadowEffect BlurRadius="5" Color="Black" Opacity="0.75" Direction="0" ShadowDepth="0"
                                          RenderingBias="Quality" />
                        </Border.Effect>
                    </Border>
                    <Grid SnapsToDevicePixels="True" UseLayoutRounding="True" Margin="5">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="40" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>

                        <Border Grid.Row="1" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
                            <Grid>
                                <AdornerDecorator>
                                    <ContentPresenter x:Name="WindowContent" />
                                </AdornerDecorator>
                                <ResizeGrip  x:Name="WindowResizeGrip" HorizontalAlignment="Right" IsTabStop="false" Visibility="Collapsed" VerticalAlignment="Bottom" />
                            </Grid>
                        </Border>
                        <Grid Grid.Row="0" Background="{DynamicResource BackgroundQuarter}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" MinWidth="20" />
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <TextBlock FontFamily="{StaticResource IconFont}" FontSize="20"
                                       Grid.Column="0" Margin="14,0" VerticalAlignment="Center"
                                        Text="{Binding Path=(control:IvyWindow.Icon), RelativeSource={RelativeSource TemplatedParent}}"
                                        Foreground="{DynamicResource Foreground}"
                                        control:ShowSystemMenuBehavior.TargetWindow="{Binding RelativeSource={RelativeSource AncestorType={x:Type Window}, Mode=FindAncestor}}"
                                        control:ShowSystemMenuBehavior.LeftButtonShowAt="{Binding ElementName=WindowContent}" />
                            <TextBlock Grid.Column="1" DockPanel.Dock="Left" Padding="3,0,0,0"
                                   FontFamily="{DynamicResource Text}"
                                   Text="{TemplateBinding Title}"
                                    HorizontalAlignment="Stretch"
                                    VerticalAlignment="Center"
                                    Foreground="{DynamicResource Foreground}"
                                    control:WindowDragBehavior.LeftMouseButtonDrag="{Binding RelativeSource={RelativeSource AncestorType={x:Type Window}, Mode=FindAncestor}}"
                                    control:ControlDoubleClickBehavior.ExecuteCommand="{DynamicResource MaximizeCommand}"
                                    control:ControlDoubleClickBehavior.ExecuteCommandParameter="{Binding RelativeSource={RelativeSource AncestorType={x:Type Window}, Mode=FindAncestor}}"
                                    control:ShowSystemMenuBehavior.TargetWindow="{Binding RelativeSource={RelativeSource AncestorType={x:Type Window}, Mode=FindAncestor}}"
                                    control:ShowSystemMenuBehavior.RightButtonShow="true" FontSize="11pt" />
                            <StackPanel Grid.Column="2" Orientation="Horizontal">
                                <Button DockPanel.Dock="Right" Style="{DynamicResource WindowButton}"
                                        Command="{DynamicResource MinimizeCommand}"
                                        CommandParameter="{Binding RelativeSource={RelativeSource AncestorType={x:Type Window}, Mode=FindAncestor}}">
                                    <TextBlock FontFamily="{StaticResource IconFont}" FontSize="20">&#xE15B;</TextBlock>
                                </Button>
                                <Button DockPanel.Dock="Right" Style="{DynamicResource WindowButton}" Command="{DynamicResource MaximizeCommand}" CommandParameter="{Binding RelativeSource={RelativeSource AncestorType={x:Type Window}, Mode=FindAncestor}}">
                                    <TextBlock FontFamily="{StaticResource IconFont}" FontSize="20">&#xE5D0;</TextBlock>
                                </Button>
                                <Button DockPanel.Dock="Right" Style="{DynamicResource WindowButton}" Command="{DynamicResource CloseCommand}" CommandParameter="{Binding RelativeSource={RelativeSource AncestorType={x:Type Window}, Mode=FindAncestor}}">
                                    <TextBlock FontFamily="{StaticResource IconFont}" FontSize="20">&#xE5CD;</TextBlock>
                                </Button>
                            </StackPanel>
                        </Grid>
                    </Grid>
                    <Thumb x:Name="ThumbTop" Height="6" Margin="14,0" VerticalAlignment="Top" Cursor="SizeNS"  Opacity="0" control:WindowResizeBehavior.TopResize="{Binding RelativeSource={RelativeSource AncestorType={x:Type Window}, Mode=FindAncestor}}" />
                    <Thumb x:Name="ThumbTopLeft" Height="6" Width="6" VerticalAlignment="Top" HorizontalAlignment="Left" Cursor="SizeNWSE"  Opacity="0" control:WindowResizeBehavior.TopLeftResize="{Binding RelativeSource={RelativeSource AncestorType={x:Type Window}, Mode=FindAncestor}}" />
                    <Thumb x:Name="ThumbBottom" Height="6" Margin="14,0" VerticalAlignment="Bottom" Cursor="SizeNS" Opacity="0" control:WindowResizeBehavior.BottomResize="{Binding RelativeSource={RelativeSource AncestorType={x:Type Window}, Mode=FindAncestor}}" />
                    <Thumb x:Name="ThumbTopRight" Height="6" Width="6" VerticalAlignment="Top" HorizontalAlignment="Right" Cursor="SizeNESW"  Opacity="0" control:WindowResizeBehavior.TopRightResize="{Binding RelativeSource={RelativeSource AncestorType={x:Type Window}, Mode=FindAncestor}}" />
                    <Thumb x:Name="ThumbRight" HorizontalAlignment="Right" Margin="0,14" Width="6" Cursor="SizeWE"  Opacity="0" control:WindowResizeBehavior.RightResize="{Binding RelativeSource={RelativeSource AncestorType={x:Type Window}, Mode=FindAncestor}}" />
                    <Thumb x:Name="ThumbBottomRight" Height="6" Width="6" VerticalAlignment="Bottom" HorizontalAlignment="Right" Cursor="SizeNWSE"  Opacity="0" control:WindowResizeBehavior.BottomRightResize="{Binding RelativeSource={RelativeSource AncestorType={x:Type Window}, Mode=FindAncestor}}" />
                    <Thumb x:Name="ThumbLeft" HorizontalAlignment="Left" Margin="0,14" Width="6" Cursor="SizeWE"  Opacity="0" control:WindowResizeBehavior.LeftResize="{Binding RelativeSource={RelativeSource AncestorType={x:Type Window}, Mode=FindAncestor}}" />
                    <Thumb x:Name="ThumbBottomLeft" Height="6" Width="6" VerticalAlignment="Bottom" HorizontalAlignment="Left" Cursor="SizeNESW"  Opacity="0" control:WindowResizeBehavior.BottomLeftResize="{Binding RelativeSource={RelativeSource AncestorType={x:Type Window}, Mode=FindAncestor}}" />
                </Grid>

                <ControlTemplate.Triggers>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="ResizeMode" Value="CanResizeWithGrip" />
                            <Condition Property="WindowState" Value="Normal" />
                        </MultiTrigger.Conditions>
                        <Setter Property="Visibility" TargetName="WindowResizeGrip" Value="Visible" />
                    </MultiTrigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
            <ControlTemplate x:Key="ScrollViewerTemplate" TargetType="{x:Type ScrollViewer}">
                <Grid x:Name="Grid" Background="{TemplateBinding Background}">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <Rectangle x:Name="Corner" Grid.Column="1" Fill="{DynamicResource Control}" Grid.Row="1" />
                    <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" CanContentScroll="{TemplateBinding CanContentScroll}" CanHorizontallyScroll="False" CanVerticallyScroll="False" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="0" Margin="{TemplateBinding Padding}" Grid.Row="0"
                                            Grid.RowSpan="2" Grid.ColumnSpan="2" />
                    <ScrollBar x:Name="PART_VerticalScrollBar" AutomationProperties.AutomationId="VerticalScrollBar" Cursor="Arrow" Grid.Column="1" Maximum="{TemplateBinding ScrollableHeight}" Minimum="0" Grid.Row="0" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}" />
                    <ScrollBar x:Name="PART_HorizontalScrollBar" AutomationProperties.AutomationId="HorizontalScrollBar" Cursor="Arrow" Grid.Column="0" Maximum="{TemplateBinding ScrollableWidth}" Minimum="0" Orientation="Horizontal" Grid.Row="1" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}" />
                </Grid>
                <ControlTemplate.Triggers>
                    <EventTrigger RoutedEvent="ScrollViewer.ScrollChanged">
                        <EventTrigger.Actions>
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimationUsingKeyFrames
                                        Storyboard.TargetName="PART_VerticalScrollBar"
                                        Storyboard.TargetProperty="Opacity">
                                        <DiscreteDoubleKeyFrame Value="1" KeyTime="0:0:0" />
                                        <DiscreteDoubleKeyFrame Value="1" KeyTime="0:0:1" />
                                        <EasingDoubleKeyFrame Value="0" KeyTime="0:0:2" />
                                    </DoubleAnimationUsingKeyFrames>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger.Actions>
                    </EventTrigger>
                    <EventTrigger RoutedEvent="UIElement.MouseEnter">
                        <EventTrigger.Actions>
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimationUsingKeyFrames
                                        Storyboard.TargetName="PART_VerticalScrollBar"
                                        Storyboard.TargetProperty="Opacity">
                                        <EasingDoubleKeyFrame Value="0" KeyTime="0:0:0" />
                                        <EasingDoubleKeyFrame Value="1" KeyTime="0:0:0.25" />
                                        <EasingDoubleKeyFrame Value="1" KeyTime="0:0:1" />
                                        <EasingDoubleKeyFrame Value="0" KeyTime="0:0:2" />
                                    </DoubleAnimationUsingKeyFrames>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger.Actions>
                    </EventTrigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
            <ControlTemplate x:Key="ComboBoxControlTemplate" TargetType="{x:Type ComboBox}">
                <Grid x:Name="templateRoot" SnapsToDevicePixels="True">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0" />
                    </Grid.ColumnDefinitions>
                    <Popup x:Name="PART_Popup" AllowsTransparency="True" Grid.ColumnSpan="2"
                           IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                           Margin="-2" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">
                        <Themes:SystemDropShadowChrome x:Name="shadow" Color="Transparent" MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{Binding ActualWidth, ElementName=templateRoot}">
                            <Border x:Name="DropDownBorder" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" BorderThickness="1" Background="{DynamicResource BackgroundLight}">
                                <ScrollViewer x:Name="DropDownScrollViewer">
                                    <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                        <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                    </Grid>
                                </ScrollViewer>
                            </Border>
                        </Themes:SystemDropShadowChrome>
                    </Popup>
                    <control:RippleEffectDecorator>
                        <Grid>
                            <ToggleButton x:Name="toggleButton"
                                  BorderBrush="{TemplateBinding BorderBrush}"
                                  BorderThickness="{TemplateBinding BorderThickness}"
                                  Background="{TemplateBinding Background}"
                                  IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                                <ToggleButton.Style>
                                    <Style TargetType="{x:Type ToggleButton}">
                                        <Setter Property="OverridesDefaultStyle" Value="True" />
                                        <Setter Property="IsTabStop" Value="False" />
                                        <Setter Property="Focusable" Value="False" />
                                        <Setter Property="ClickMode" Value="Press" />

                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                    <Border x:Name="templateRoot" Background="{TemplateBinding Background}"  BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True">
                                                        <Border x:Name="splitBorder" BorderBrush="Transparent" BorderThickness="1" HorizontalAlignment="Right" Margin="0" SnapsToDevicePixels="True" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
                                                            <TextBlock x:Name="Arrow" FontFamily="{StaticResource IconFont}" Text="&#xE5CF;"
                                                               Foreground="{DynamicResource ForegroundSecondary}" HorizontalAlignment="Center" Margin="0" VerticalAlignment="Center" />
                                                        </Border>
                                                    </Border>
                                                    <ControlTemplate.Triggers>
                                                        <MultiDataTrigger>
                                                            <MultiDataTrigger.Conditions>
                                                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="true" />
                                                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="false" />
                                                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="false" />
                                                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="true" />
                                                            </MultiDataTrigger.Conditions>
                                                            <Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource BackgroundQuarter}" />
                                                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource ForegroundSecondary}" />
                                                            <Setter Property="Background" TargetName="splitBorder" Value="Transparent" />
                                                            <Setter Property="BorderBrush" TargetName="splitBorder" Value="Transparent" />
                                                        </MultiDataTrigger>
                                                        <Trigger Property="IsMouseOver" Value="True">
                                                            <Setter Property="Foreground" TargetName="Arrow" Value="{DynamicResource Foreground}" />
                                                        </Trigger>
                                                        <MultiDataTrigger>
                                                            <MultiDataTrigger.Conditions>
                                                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true" />
                                                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="false" />
                                                            </MultiDataTrigger.Conditions>
                                                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource Foreground}" />
                                                        </MultiDataTrigger>
                                                        <MultiDataTrigger>
                                                            <MultiDataTrigger.Conditions>
                                                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true" />
                                                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="true" />
                                                            </MultiDataTrigger.Conditions>
                                                            <Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource BackgroundHalf}" />
                                                            <Setter Property="BorderBrush" TargetName="splitBorder" Value="{DynamicResource ForegroundSecondary}" />
                                                        </MultiDataTrigger>
                                                        <Trigger Property="IsPressed" Value="True">
                                                            <Setter Property="Foreground" TargetName="Arrow" Value="{DynamicResource ForegroundTertiary}" />
                                                        </Trigger>
                                                        <MultiDataTrigger>
                                                            <MultiDataTrigger.Conditions>
                                                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true" />
                                                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="false" />
                                                            </MultiDataTrigger.Conditions>
                                                            <Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource Control}" />
                                                        </MultiDataTrigger>
                                                        <MultiDataTrigger>
                                                            <MultiDataTrigger.Conditions>
                                                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true" />
                                                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="true" />
                                                            </MultiDataTrigger.Conditions>
                                                            <Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource Control}" />
                                                        </MultiDataTrigger>
                                                        <Trigger Property="IsEnabled" Value="False">
                                                            <Setter Property="Foreground" TargetName="Arrow" Value="{DynamicResource ForegroundHalf}" />
                                                        </Trigger>
                                                        <MultiDataTrigger>
                                                            <MultiDataTrigger.Conditions>
                                                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false" />
                                                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="false" />
                                                            </MultiDataTrigger.Conditions>
                                                            <Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource Highlight}" />
                                                        </MultiDataTrigger>
                                                        <MultiDataTrigger>
                                                            <MultiDataTrigger.Conditions>
                                                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false" />
                                                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="true" />
                                                            </MultiDataTrigger.Conditions>
                                                            <Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource Highlight}" />
                                                            <Setter Property="Background" TargetName="splitBorder" Value="Transparent" />
                                                            <Setter Property="BorderBrush" TargetName="splitBorder" Value="Transparent" />
                                                        </MultiDataTrigger>
                                                    </ControlTemplate.Triggers>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </ToggleButton.Style>
                            </ToggleButton>
                            <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" Content="{TemplateBinding SelectionBoxItem}" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="False" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </Grid>
                    </control:RippleEffectDecorator>
                </Grid>
                <ControlTemplate.Triggers>
                    <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="True">
                        <Setter Property="Margin" TargetName="shadow" Value="0,0,5,5" />
                        <Setter Property="Color" TargetName="shadow" Value="#71000000" />
                    </Trigger>
                    <Trigger Property="HasItems" Value="False">
                        <Setter Property="Height" TargetName="DropDownBorder" Value="95" />
                    </Trigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsGrouping" Value="True" />
                            <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="False" />
                        </MultiTrigger.Conditions>
                        <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
                    </MultiTrigger>
                    <!--<Trigger Property="CanContentScroll" SourceName="DropDownScrollViewer" Value="False">
                        <Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}" />
                        <Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}" />
                    </Trigger>-->
                </ControlTemplate.Triggers>
            </ControlTemplate>
            <ControlTemplate x:Key="ProgressBarTemplate" TargetType="{x:Type ProgressBar}">
                <Grid x:Name="TemplateRoot">
                    <VisualStateManager.VisualStateGroups>
                        <VisualStateGroup x:Name="CommonStates">
                            <VisualState x:Name="Determinate" />
                            <VisualState x:Name="Indeterminate">
                                <Storyboard RepeatBehavior="Forever">
                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Animation">
                                        <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                                        <EasingDoubleKeyFrame KeyTime="0:0:1" Value="1" />
                                        <EasingDoubleKeyFrame KeyTime="0:0:2" Value="0" />
                                    </DoubleAnimationUsingKeyFrames>
                                </Storyboard>
                            </VisualState>
                        </VisualStateGroup>
                    </VisualStateManager.VisualStateGroups>
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" />
                    <Rectangle x:Name="PART_Track" />
                    <Grid x:Name="PART_Indicator" ClipToBounds="True" HorizontalAlignment="Left">
                        <Rectangle x:Name="Indicator" Fill="{TemplateBinding Foreground}" />
                        <Rectangle x:Name="Animation" Fill="{TemplateBinding Foreground}" RenderTransformOrigin="0.5,0.5">
                            <Rectangle.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform />
                                    <SkewTransform />
                                    <RotateTransform />
                                    <TranslateTransform />
                                </TransformGroup>
                            </Rectangle.RenderTransform>
                        </Rectangle>
                    </Grid>
                </Grid>
                <ControlTemplate.Triggers>
                    <Trigger Property="Orientation" Value="Vertical">
                        <Setter Property="LayoutTransform" TargetName="TemplateRoot">
                            <Setter.Value>
                                <RotateTransform Angle="-90" />
                            </Setter.Value>
                        </Setter>
                    </Trigger>
                    <Trigger Property="IsIndeterminate" Value="True">
                        <Setter Property="Visibility" TargetName="Indicator" Value="Collapsed" />
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
            <ControlTemplate x:Key="ButtonTemplate" TargetType="{x:Type Button}">
                <control:RippleEffectDecorator Background="{TemplateBinding Background}">
                    <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                </control:RippleEffectDecorator>
                <ControlTemplate.Triggers>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Foreground" Value="{DynamicResource ForegroundQuarter}" />
                    </Trigger>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Background" Value="{DynamicResource Control}" />
                        <Setter Property="Foreground" Value="{DynamicResource ForegroundHalf}" />
                    </Trigger>
                    <Trigger Property="IsPressed" Value="True">
                        <Setter Property="Background" Value="{DynamicResource Highlight}" />
                        <Setter Property="Foreground" Value="{DynamicResource Foreground}" />
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
            <!--#endregion-->

            <control:WindowMinimizeCommand x:Key="MinimizeCommand" />
            <control:WindowMaximizeCommand x:Key="MaximizeCommand" />
            <control:WindowCloseCommand x:Key="CloseCommand" />

            <!--#region Styles-->
            <Style TargetType="{x:Type Control}">
                <Setter Property="Foreground" Value="{DynamicResource Foreground}" />
                <Setter Property="FontFamily" Value="{DynamicResource Text}" />
            </Style>
            <Style TargetType="{x:Type RepeatButton}">
                <Setter Property="Foreground" Value="{DynamicResource Foreground}" />
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="BorderBrush" Value="{DynamicResource Control}" />
                <Setter Property="BorderThickness" Value="1" />
            </Style>

            <Style TargetType="{x:Type FrameworkElement}">
                <Setter Property="TextElement.FontFamily" Value="{DynamicResource Text}" />
                <Setter Property="TextBlock.FontFamily" Value="{DynamicResource Text}" />
            </Style>
            <Style TargetType="{x:Type Button}">
                <Setter Property="VerticalContentAlignment" Value="Center" />
                <Setter Property="HorizontalContentAlignment" Value="Center" />
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="BorderBrush" Value="{DynamicResource Control}" />
                <Setter Property="Foreground" Value="{DynamicResource Foreground}" />
                <Setter Property="FontFamily" Value="{DynamicResource Text}" />
                <Setter Property="BorderThickness" Value="1" />
                <Setter Property="Padding" Value="5" />

                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="BorderBrush" Value="{DynamicResource Foreground}" />
                        <Setter Property="Background" Value="Transparent" />
                    </Trigger>
                    <Trigger Property="IsPressed" Value="True">
                        <Setter Property="Background" Value="{DynamicResource Control}" />
                        <Setter Property="BorderBrush" Value="{DynamicResource Control}" />
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Opacity" Value="0.75" />
                        <Setter Property="BorderBrush" Value="{DynamicResource Control}" />
                        <Setter Property="Background" Value="Transparent" />
                    </Trigger>
                </Style.Triggers>
            </Style>
            <Style TargetType="{x:Type PasswordBox}">
                <Setter Property="MinWidth" Value="192" />
                <Setter Property="MaxWidth" Value="600" />
                <Setter Property="Height" Value="36" />
                <Setter Property="Padding" Value="0,8,0,8" />
                <Setter Property="VerticalContentAlignment" Value="Center" />
                <Setter Property="HorizontalContentAlignment" Value="Center" />
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="Foreground" Value="{DynamicResource Foreground}" />
                <Setter Property="CaretBrush" Value="{DynamicResource Foreground}" />
                <Setter Property="Cursor" Value="IBeam" />
                <Setter Property="Template" Value="{StaticResource PasswordBoxTemplate}" />
                <Setter Property="BorderThickness" Value="0,0,0,1" />
                <Setter Property="BorderBrush" Value="{DynamicResource Control}" />
                <Style.Triggers>
                    <Trigger Property="IsFocused" Value="True">
                        <!--<Trigger.EnterActions>
                            <BeginStoryboard>
                                <Storyboard Storyboard.TargetProperty="(Control.BorderBrush).(SolidColorBrush.Color)">
                                    <ColorAnimation To="{StaticResource Accent}"
                                                    Duration="0:0:0.5">
                                        <ColorAnimation.EasingFunction>
                                            <CircleEase EasingMode="EaseOut" />
                                        </ColorAnimation.EasingFunction>
                                    </ColorAnimation>
                                </Storyboard>
                            </BeginStoryboard>
                        </Trigger.EnterActions>
                        <Trigger.ExitActions>
                            <BeginStoryboard>
                                <Storyboard Storyboard.TargetProperty="(Control.BorderBrush).(SolidColorBrush.Color)">
                                    <ColorAnimation From="{StaticResource Accent}"
                                                    Duration="0:0:0.5">
                                        <ColorAnimation.EasingFunction>
                                            <CircleEase EasingMode="EaseOut" />
                                        </ColorAnimation.EasingFunction>
                                    </ColorAnimation>
                                </Storyboard>
                            </BeginStoryboard>
                        </Trigger.ExitActions>-->
                        <Setter Property="BorderBrush" Value="{DynamicResource AccentBrush}" />
                    </Trigger>
                </Style.Triggers>
            </Style>
            <Style TargetType="{x:Type ComboBox}">
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="Foreground" Value="{DynamicResource Foreground}" />
                <Setter Property="BorderThickness" Value="0,0,0,1" />
                <Setter Property="MinWidth" Value="128" />
                <Setter Property="Height" Value="32" />
                <Setter Property="Template" Value="{StaticResource ComboBoxControlTemplate}" />
            </Style>
            <Style TargetType="{x:Type ComboBoxItem}">
                <Setter Property="Height" Value="32" />
                <Setter Property="Template" Value="{StaticResource ComboBoxItemControlTemplate}" />
            </Style>
            <Style TargetType="{x:Type TextBox}">
                <Setter Property="MinWidth" Value="192" />
                <Setter Property="Padding" Value="5" />
                <Setter Property="VerticalContentAlignment" Value="Center" />
                <Setter Property="HorizontalContentAlignment" Value="Center" />
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="Foreground" Value="{DynamicResource Foreground}" />
                <Setter Property="CaretBrush" Value="{DynamicResource Foreground}" />
                <Setter Property="Cursor" Value="IBeam" />
                <Setter Property="BorderThickness" Value="0,0,0,1" />
                <Setter Property="TextOptions.TextRenderingMode" Value="ClearType" />
                <Setter Property="BorderBrush" Value="{DynamicResource Control}" />

                <Style.Triggers>
                    <Trigger Property="IsFocused" Value="True">
                        <Setter Property="BorderBrush" Value="{DynamicResource AccentBrush}" />
                    </Trigger>
                </Style.Triggers>
            </Style>
            <Style TargetType="{x:Type xctk:IntegerUpDown}">
                <Setter Property="MinWidth" Value="192" />
                <Setter Property="Padding" Value="5" />
                <Setter Property="VerticalContentAlignment" Value="Center" />
                <Setter Property="HorizontalContentAlignment" Value="Center" />
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="Foreground" Value="{DynamicResource Foreground}" />
                <Setter Property="BorderThickness" Value="0" />
            </Style>
            <Style TargetType="{x:Type CheckBox}">
                <Setter Property="BorderThickness" Value="2" />
                <Setter Property="Template" Value="{StaticResource CheckBoxTemplate}" />
            </Style>
            <Style TargetType="{x:Type ProgressBar}">
                <Setter Property="Foreground" Value="{DynamicResource AccentBrush}" />
                <Setter Property="Template" Value="{StaticResource ProgressBarTemplate}" />
            </Style>
            <Style TargetType="{x:Type Button}" x:Key="WindowButton">
                <Setter Property="Height" Value="40" />
                <Setter Property="Width" Value="54" />
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="Foreground" Value="{DynamicResource Foreground}" />
                <Setter Property="FontFamily" Value="{DynamicResource IconFont}" />
                <Setter Property="Template" Value="{StaticResource ButtonTemplate}" />
            </Style>
            <Style TargetType="{x:Type control:RippleEffectDecorator}">
                <Setter Property="Template" Value="{StaticResource RippleEffectDecoratorTemplate}" />
                <Setter Property="HighlightBackground" Value="{DynamicResource BackgroundQuarter}" />
            </Style>
            <Style x:Key="IvyWindow" TargetType="{x:Type Window}">
                <Setter Property="WindowStyle" Value="None" />
                <Setter Property="AllowsTransparency" Value="True" />
                <Setter Property="SnapsToDevicePixels" Value="True" />
                <Setter Property="MinWidth" Value="200" />
                <Setter Property="MinHeight" Value="46" />
                <Setter Property="Icon" Value="Content/Logo.ico" />
                <Setter Property="Template" Value="{StaticResource WindowTemplate}" />
            </Style>
            <Style x:Key="ScrollBarButton" TargetType="{x:Type RepeatButton}">
                <Setter Property="BorderThickness" Value="0" />
                <Setter Property="HorizontalContentAlignment" Value="Center" />
                <Setter Property="VerticalContentAlignment" Value="Center" />
                <Setter Property="Padding" Value="1" />
                <Setter Property="Focusable" Value="false" />
                <Setter Property="IsTabStop" Value="false" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type RepeatButton}">
                            <Border x:Name="border" Background="Transparent" SnapsToDevicePixels="true">
                                <ContentPresenter x:Name="contentPresenter" Focusable="False"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="true">
                                    <Setter Property="Background" TargetName="border" Value="{DynamicResource ForegroundQuarter}" />
                                </Trigger>
                                <Trigger Property="IsPressed" Value="true">
                                    <Setter Property="Background" TargetName="border" Value="{DynamicResource ForegroundHalf}" />
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Opacity" TargetName="contentPresenter" Value="0.56" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="RepeatButtonTransparent" TargetType="{x:Type RepeatButton}">
                <Setter Property="OverridesDefaultStyle" Value="true" />
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="Focusable" Value="false" />
                <Setter Property="IsTabStop" Value="false" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type RepeatButton}">
                            <Rectangle Fill="{TemplateBinding Background}" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}" />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="ScrollBarThumb" TargetType="{x:Type Thumb}">
                <Setter Property="OverridesDefaultStyle" Value="true" />
                <Setter Property="IsTabStop" Value="false" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Thumb}">
                            <Grid Width="{TemplateBinding Width}" Height="{TemplateBinding Height}">
                                <Rectangle x:Name="rectangle" Fill="{DynamicResource Control}"
                                   RadiusX="4" RadiusY="4" Margin="4" />
                            </Grid>

                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="true">
                                    <Setter Property="Fill" TargetName="rectangle" Value="{DynamicResource Highlight}" />
                                </Trigger>
                                <Trigger Property="IsDragging" Value="true">
                                    <Setter Property="Fill" TargetName="rectangle" Value="{DynamicResource Highlight}" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style TargetType="{x:Type ScrollBar}">
                <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false" />
                <Setter Property="Stylus.IsFlicksEnabled" Value="true" />
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="Foreground" Value="{DynamicResource Foreground}" />
                <Setter Property="BorderThickness" Value="0" />
                <Setter Property="Width" Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" />
                <Setter Property="MinWidth" Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ScrollBar}">
                            <Grid x:Name="Bg" SnapsToDevicePixels="true">
                                <Grid.RowDefinitions>
                                    <RowDefinition MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}" />
                                    <RowDefinition Height="0.00001*" />
                                    <RowDefinition MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}" />
                                </Grid.RowDefinitions>
                                <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="#00F0F0F0" Grid.Row="1" />
                                <RepeatButton x:Name="PART_LineUpButton" Command="{x:Static ScrollBar.LineUpCommand}" IsEnabled="{TemplateBinding IsMouseOver}" Style="{StaticResource ScrollBarButton}">
                                    <Path x:Name="ArrowTop" Data="M 0,4 C0,4 0,6 0,6 0,6 3.5,2.5 3.5,2.5 3.5,2.5 7,6 7,6 7,6 7,4 7,4 7,4 3.5,0.5 3.5,0.5 3.5,0.5 0,4 0,4 z" Fill="{DynamicResource Foreground}" Margin="3,4,3,3" Stretch="Uniform" />
                                </RepeatButton>
                                <Track x:Name="PART_Track" IsDirectionReversed="true" IsEnabled="{TemplateBinding IsMouseOver}" Grid.Row="1">
                                    <Track.DecreaseRepeatButton>
                                        <RepeatButton Command="{x:Static ScrollBar.PageUpCommand}" Style="{StaticResource RepeatButtonTransparent}" />
                                    </Track.DecreaseRepeatButton>
                                    <Track.IncreaseRepeatButton>
                                        <RepeatButton Command="{x:Static ScrollBar.PageDownCommand}" Style="{StaticResource RepeatButtonTransparent}" />
                                    </Track.IncreaseRepeatButton>
                                    <Track.Thumb>
                                        <Thumb Style="{StaticResource ScrollBarThumb}" />
                                    </Track.Thumb>
                                </Track>
                                <RepeatButton x:Name="PART_LineDownButton" Command="{x:Static ScrollBar.LineDownCommand}" IsEnabled="{TemplateBinding IsMouseOver}" Grid.Row="2" Style="{StaticResource ScrollBarButton}">
                                    <Path x:Name="ArrowBottom" Data="M 0,2.5 C0,2.5 0,0.5 0,0.5 0,0.5 3.5,4 3.5,4 3.5,4 7,0.5 7,0.5 7,0.5 7,2.5 7,2.5 7,2.5 3.5,6 3.5,6 3.5,6 0,2.5 0,2.5 z" Fill="{DynamicResource Foreground}" Margin="3,4,3,3" Stretch="Uniform" />
                                </RepeatButton>
                            </Grid>
                            <ControlTemplate.Triggers>

                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineDownButton}" Value="true" />
                                        <Condition Binding="{Binding IsPressed, ElementName=PART_LineDownButton}" Value="true" />
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Fill" TargetName="ArrowBottom" Value="{DynamicResource ForegroundSecondary}" />
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineUpButton}" Value="true" />
                                        <Condition Binding="{Binding IsPressed, ElementName=PART_LineUpButton}" Value="true" />
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Fill" TargetName="ArrowTop" Value="{DynamicResource ForegroundSecondary}" />
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineDownButton}" Value="true" />
                                        <Condition Binding="{Binding IsPressed, ElementName=PART_LineDownButton}" Value="false" />
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Fill" TargetName="ArrowBottom" Value="{DynamicResource ForegroundSecondary}" />
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineUpButton}" Value="true" />
                                        <Condition Binding="{Binding IsPressed, ElementName=PART_LineUpButton}" Value="false" />
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Fill" TargetName="ArrowTop" Value="{DynamicResource ForegroundSecondary}" />
                                </MultiDataTrigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Fill" TargetName="ArrowTop" Value="{DynamicResource ForegroundSecondary}" />
                                    <Setter Property="Fill" TargetName="ArrowBottom" Value="{DynamicResource ForegroundSecondary}" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="Orientation" Value="Horizontal">
                        <Setter Property="Width" Value="Auto" />
                        <Setter Property="MinWidth" Value="0" />
                        <Setter Property="Height" Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}" />
                        <Setter Property="MinHeight" Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}" />
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type ScrollBar}">
                                    <Grid x:Name="Bg" SnapsToDevicePixels="true">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}" />
                                            <ColumnDefinition Width="0.00001*" />
                                            <ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}" />
                                        </Grid.ColumnDefinitions>
                                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.Column="1" />
                                        <RepeatButton x:Name="PART_LineLeftButton" Command="{x:Static ScrollBar.LineLeftCommand}" IsEnabled="{TemplateBinding IsMouseOver}" Style="{StaticResource ScrollBarButton}">
                                            <Path x:Name="ArrowLeft" Data="M 3.18,7 C3.18,7 5,7 5,7 5,7 1.81,3.5 1.81,3.5 1.81,3.5 5,0 5,0 5,0 3.18,0 3.18,0 3.18,0 0,3.5 0,3.5 0,3.5 3.18,7 3.18,7 z" Fill="{DynamicResource Foreground}" Margin="3" Stretch="Uniform" />
                                        </RepeatButton>
                                        <Track x:Name="PART_Track" Grid.Column="1" IsEnabled="{TemplateBinding IsMouseOver}">
                                            <Track.DecreaseRepeatButton>
                                                <RepeatButton Command="{x:Static ScrollBar.PageLeftCommand}" Style="{StaticResource RepeatButtonTransparent}" />
                                            </Track.DecreaseRepeatButton>
                                            <Track.IncreaseRepeatButton>
                                                <RepeatButton Command="{x:Static ScrollBar.PageRightCommand}" Style="{StaticResource RepeatButtonTransparent}" />
                                            </Track.IncreaseRepeatButton>
                                            <Track.Thumb>
                                                <Thumb Style="{StaticResource ScrollBarThumb}" />
                                            </Track.Thumb>
                                        </Track>
                                        <RepeatButton x:Name="PART_LineRightButton" Grid.Column="2" Command="{x:Static ScrollBar.LineRightCommand}" IsEnabled="{TemplateBinding IsMouseOver}" Style="{StaticResource ScrollBarButton}">
                                            <Path x:Name="ArrowRight" Data="M 1.81,7 C1.81,7 0,7 0,7 0,7 3.18,3.5 3.18,3.5 3.18,3.5 0,0 0,0 0,0 1.81,0 1.81,0 1.81,0 5,3.5 5,3.5 5,3.5 1.81,7 1.81,7 z" Fill="{DynamicResource Foreground}" Margin="3" Stretch="Uniform" />
                                        </RepeatButton>
                                    </Grid>
                                    <ControlTemplate.Triggers>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineRightButton}" Value="true" />
                                                <Condition Binding="{Binding IsPressed, ElementName=PART_LineRightButton}" Value="true" />
                                            </MultiDataTrigger.Conditions>
                                            <Setter Property="Fill" TargetName="ArrowRight" Value="{DynamicResource ForegroundSecondary}" />
                                        </MultiDataTrigger>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineLeftButton}" Value="true" />
                                                <Condition Binding="{Binding IsPressed, ElementName=PART_LineLeftButton}" Value="true" />
                                            </MultiDataTrigger.Conditions>
                                            <Setter Property="Fill" TargetName="ArrowLeft" Value="{DynamicResource ForegroundSecondary}" />
                                        </MultiDataTrigger>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineRightButton}" Value="true" />
                                                <Condition Binding="{Binding IsPressed, ElementName=PART_LineRightButton}" Value="false" />
                                            </MultiDataTrigger.Conditions>
                                            <Setter Property="Fill" TargetName="ArrowRight" Value="{DynamicResource ForegroundSecondary}" />
                                        </MultiDataTrigger>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineLeftButton}" Value="true" />
                                                <Condition Binding="{Binding IsPressed, ElementName=PART_LineLeftButton}" Value="false" />
                                            </MultiDataTrigger.Conditions>
                                            <Setter Property="Fill" TargetName="ArrowLeft" Value="{DynamicResource ForegroundSecondary}" />
                                        </MultiDataTrigger>
                                        <Trigger Property="IsEnabled" Value="false">
                                            <Setter Property="Fill" TargetName="ArrowLeft" Value="{DynamicResource ForegroundSecondary}" />
                                            <Setter Property="Fill" TargetName="ArrowRight" Value="{DynamicResource ForegroundSecondary}" />
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Trigger>
                </Style.Triggers>
            </Style>
            <Style TargetType="{x:Type Image}" x:Key="WindowIcon">
                <Setter Property="Height" Value="20" />
                <Setter Property="Width" Value="20" />
            </Style>
            <Style TargetType="{x:Type ScrollViewer}">
                <Setter Property="Template" Value="{StaticResource ScrollViewerTemplate}" />
            </Style>

            <!--#endregion-->
        </ResourceDictionary>
    </Application.Resources>
</Application>